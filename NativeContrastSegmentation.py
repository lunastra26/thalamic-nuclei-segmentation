''' 
***************************************************************
Author: LU
Date: Nov 2020
Description:
    Class for native contrast segmentation framework. 
    Uses an MPRAGE (CSF-nulled T1-weighted volume) to 
    predict thalamic nuclei + thalamus.
    CNN is trained on ground truth generated by THOMAS algorithm on
    White matter nulled MPRAGE images (Su et al. 2019).
THOMAS Label Legend:
0 Background  
2 AV   Anterior Ventral nucleus 
4 VA   Ventral anterior nucleus (VA)
5 VLa  Ventral lateral anterior nucleus 
6 VLP  Ventral lateral posterior nucleus 
7 VPL  Ventral posterior lateral nucleus
8 Pul  Pulvinar nucleus 
9 LGN  Lateral geniculate nucleus 
10 MGN Medial geniculate nucleus 
11 CM  Centromedian nucleus 
12 MD  Mediodorsal nucleus 
13 Hb  Habenular nucleus 
14 MTT Mammillothalamic tract 
     
***************************************************************
'''
import os
import numpy as np
from keras import optimizers
from ModelSetup import *
from utils import *
 


class NCS:
    '''
    MPRAGE Contrast based segmentation framework for thalamic nuclei segmentation
    '''
    def __init__(
        self,
        loadPath="Pretrained_models/GPUs/",
        visible_gpu='0'        
    ):
        self.visible_gpu = visible_gpu
        self.opShape = (200,200)
        self.LR = 2e-4
        self.beta_1 = 0.5
        self.beta_2 = 0.999
        self.blkSize = 5
        self.num_classes = 12
        self.conv_kernel=(3,3,3)
        self.loadPath = loadPath
        self.optimizer = optimizers.Adam(self.LR, self.beta_1, self.beta_2)
        self.modelSavePath_segmentation = os.path.join(self.loadPath,'pretrained_segmentation_mprage.hdf5')        
        self.SegmentationCNN  = self.build_SegmentationCNN()
        
        
    def build_SegmentationCNN(self):
        '''
        Instantiate segmentation CNN and load it with pretrained weights for
        thalamic nuclei segmentation using MPRAGE contrast
        '''
        params = dict()
        params['ipShape'] = (self.opShape[0],self.opShape[1],self.blkSize,1) 
        params['visible_gpu'] = self.visible_gpu
        params['num_classes'] = self.num_classes
        params['optimizer'] = self.optimizer
        params['conv_kernel'] = self.conv_kernel
        pretrained_weights = self.modelSavePath_segmentation
        model_seg = initializeSegmentationCNN(UNET3D_Segmentation,params,pretrained_weights)
        return model_seg
    
    def predictThalamicNuclei(self, t1_nii):
        '''
        Predict thalamic nuclei on MPRAGE contrast. Legend:
            T_L_pred: left thalamus mask
            T_R_pred: right thalamus mask
            FN_L_pred: Multilabel thalamic nuclei mask (left)
            FN_R_pred: Multilabel thalamic nuclei mask (left)
        '''
        target_shape = (self.opShape[0],self.opShape[1])
        img = myCrop3D(t1_nii,target_shape)
        # Thalamus and nuclei predictions for left side
        print('Thalamic Nuclei prediction for left side...')
        T_L_pred, FN_L_pred  = predictLabels(img, self.SegmentationCNN, blkSize=5)
        T_L_pred, FN_L_pred  = postProcessLabels(T_L_pred, FN_L_pred)
        
        # predictions for right side
        print('Thalamic Nuclei prediction for right side...')
        img = np.fliplr(img)
        T_R_pred, FN_R_pred  = predictLabels(img, self.SegmentationCNN, blkSize=5)
        T_R_pred, FN_R_pred  = postProcessLabels(T_R_pred, FN_R_pred)
        
        print('Post-processing and restoring image to original size...')
        # restore predictions to original image size
        T_L_pred  = restoreCrop3D(T_L_pred,t1_nii.shape)
        FN_L_pred = restoreCrop3D(FN_L_pred,t1_nii.shape)
        T_R_pred  = restoreCrop3D(T_R_pred,t1_nii.shape)
        FN_R_pred = restoreCrop3D(FN_R_pred,t1_nii.shape)
        print('Mapping labels based on THOMAS legend...')
        FN_L_pred = mapLabels2THOMAS(FN_L_pred)
        FN_R_pred = mapLabels2THOMAS(FN_R_pred)
        
        return T_L_pred, FN_L_pred, T_R_pred, FN_R_pred
















 